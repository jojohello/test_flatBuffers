// automatically generated by the FlatBuffers compiler, do not modify

using System;
using FlatBuffers;

public sealed class MapInfo : Table {
  public static MapInfo GetRootAsMapInfo(ByteBuffer _bb) { return GetRootAsMapInfo(_bb, new MapInfo()); }
  public static MapInfo GetRootAsMapInfo(ByteBuffer _bb, MapInfo obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public MapInfo __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int MapWidth { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int MapHeight { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public Grid GetCollisionGrids(int j) { return GetCollisionGrids(new Grid(), j); }
  public Grid GetCollisionGrids(Grid obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__vector(o) + j * 8, bb) : null; }
  public int CollisionGridsLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<MapInfo> CreateMapInfo(FlatBufferBuilder builder,
      int mapWidth = 0,
      int mapHeight = 0,
      VectorOffset collisionGridsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    MapInfo.AddCollisionGrids(builder, collisionGridsOffset);
    MapInfo.AddMapHeight(builder, mapHeight);
    MapInfo.AddMapWidth(builder, mapWidth);
    return MapInfo.EndMapInfo(builder);
  }

  public static void StartMapInfo(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddMapWidth(FlatBufferBuilder builder, int mapWidth) { builder.AddInt(0, mapWidth, 0); }
  public static void AddMapHeight(FlatBufferBuilder builder, int mapHeight) { builder.AddInt(1, mapHeight, 0); }
  public static void AddCollisionGrids(FlatBufferBuilder builder, VectorOffset collisionGridsOffset) { builder.AddOffset(2, collisionGridsOffset.Value, 0); }
  public static void StartCollisionGridsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<MapInfo> EndMapInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MapInfo>(o);
  }
};

