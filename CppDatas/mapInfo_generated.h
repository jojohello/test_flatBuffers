// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MAPINFO_H_
#define FLATBUFFERS_GENERATED_MAPINFO_H_

#include "flatbuffers/flatbuffers.h"

struct Grid;

struct MapInfo;

MANUALLY_ALIGNED_STRUCT(4) Grid FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Grid() { memset(this, 0, sizeof(Grid)); }
  Grid(const Grid &_o) { memcpy(this, &_o, sizeof(Grid)); }
  Grid(int32_t _x, int32_t _y)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)) { }

  int32_t x() const { return flatbuffers::EndianScalar(x_); }
  int32_t y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(Grid, 8);

struct MapInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MAPWIDTH = 4,
    VT_MAPHEIGHT = 6,
    VT_COLLISIONGRIDS = 8
  };
  int32_t mapWidth() const { return GetField<int32_t>(VT_MAPWIDTH, 0); }
  int32_t mapHeight() const { return GetField<int32_t>(VT_MAPHEIGHT, 0); }
  const flatbuffers::Vector<const Grid *> *collisionGrids() const { return GetPointer<const flatbuffers::Vector<const Grid *> *>(VT_COLLISIONGRIDS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MAPWIDTH) &&
           VerifyField<int32_t>(verifier, VT_MAPHEIGHT) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COLLISIONGRIDS) &&
           verifier.Verify(collisionGrids()) &&
           verifier.EndTable();
  }
};

struct MapInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mapWidth(int32_t mapWidth) { fbb_.AddElement<int32_t>(MapInfo::VT_MAPWIDTH, mapWidth, 0); }
  void add_mapHeight(int32_t mapHeight) { fbb_.AddElement<int32_t>(MapInfo::VT_MAPHEIGHT, mapHeight, 0); }
  void add_collisionGrids(flatbuffers::Offset<flatbuffers::Vector<const Grid *>> collisionGrids) { fbb_.AddOffset(MapInfo::VT_COLLISIONGRIDS, collisionGrids); }
  MapInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MapInfoBuilder &operator=(const MapInfoBuilder &);
  flatbuffers::Offset<MapInfo> Finish() {
    auto o = flatbuffers::Offset<MapInfo>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<MapInfo> CreateMapInfo(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mapWidth = 0,
    int32_t mapHeight = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Grid *>> collisionGrids = 0) {
  MapInfoBuilder builder_(_fbb);
  builder_.add_collisionGrids(collisionGrids);
  builder_.add_mapHeight(mapHeight);
  builder_.add_mapWidth(mapWidth);
  return builder_.Finish();
}

inline flatbuffers::Offset<MapInfo> CreateMapInfoDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t mapWidth = 0,
    int32_t mapHeight = 0,
    const std::vector<const Grid *> *collisionGrids = nullptr) {
  return CreateMapInfo(_fbb, mapWidth, mapHeight, collisionGrids ? _fbb.CreateVector<const Grid *>(*collisionGrids) : 0);
}

#endif  // FLATBUFFERS_GENERATED_MAPINFO_H_
